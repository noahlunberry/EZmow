Week 1: Setup and Basic Web Application
Days 1-2: Project Setup
Initialize your project: Set up a Git repository.
Decide on a framework: Since you know Python, use Flask or Django for your backend.
Set up your development environment: Ensure you have all necessary IDEs and libraries installed (e.g., Flask, TensorFlow for later, OpenCV for image processing).
Days 3-4: Web Frontend
Design a simple UI: Use HTML, CSS, and JavaScript. Since you’re focusing on functionality, keep the design minimalistic.
Input form: Create a form where users can enter their address and specifications about their mower (like the width).
Day 5: API Integration for Satellite Images
Integrate Google Maps API: Implement functionality to fetch satellite images based on user input addresses. You might need to handle API keys and ensure you respect rate limits and usage policies.
Week 2: AI Implementation and Backend Development
Days 6-8: Image Processing
Implement image processing: Use OpenCV to convert images to a suitable format for analysis, possibly identifying grassy areas versus non-grassy areas.
Days 9-11: AI Model for Path Optimization
Develop the path optimization algorithm: Start simple, possibly with a known algorithm like A* or Dijkstra for pathfinding adjusted for the specifics of a mowing task.
Machine Learning (Optional): If time allows, explore using a simple ML model to improve the path predictions based on terrain features.
Day 12: Integration
Backend and Frontend Integration: Ensure that the backend properly communicates with the frontend, sending the processed satellite images and receiving user inputs.
Week 3: Refinement, Testing, and Deployment
Days 13-14: Testing and Debugging
Unit testing: Write tests for your algorithms and backend functions.
Integration testing: Ensure the whole system works together — from input through processing to output.
Days 15-16: User Feedback and Iteration
Gather feedback: Have peers or mentors test your app. Use their feedback to improve the UI/UX and fix any bugs in the logic.
Days 17-18: Additional Features and Polishing
Add extra features: Depending on the time remaining, you could add features like saving previous searches, adjusting for obstacles in the yard, or customizing the route based on different mowing patterns.
Days 19-21: Deployment and Documentation
Deploy your app: Use a platform like Heroku or AWS to deploy your application.
Write documentation: Document your setup process, how to use the app, and any APIs you used.
Prepare a demo: Create a short video or prepare a live demo to showcase your application. This will be useful for your resume and potential job interviews.
Additional Tips:
Daily Standups: Even if working alone, take 10 minutes each morning to plan your day’s tasks. It helps keep the project on track.
Version Control: Commit your changes regularly and use branches if experimenting with new features.
Keep Learning: If you encounter new challenges, use resources like Stack Overflow, GitHub, or specific forums like GIS Stack Exchange.